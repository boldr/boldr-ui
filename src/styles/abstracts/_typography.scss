// stylelint-disable length-zero-no-unit, selector-no-qualifying-type

///
/// @group typography
///

// Stops devices from scaling up text.
@include typography-init();

@if $paragraph-indent {
  p + p {
    margin-top: em-rhythm($base-line-multi * -1);
    text-indent: em-rhythm($base-line-multi);
  }
}

body {
  padding: 0;
  color: $text-color;
  margin: 0;
  font-weight: $font-weight-base;
  font-family: $font-family-base;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  padding-top: 0;
  padding-bottom: 0;
  margin-top: 0;
  font-weight: $headline-font-weight;
  font-family: $headline-font-family;
}

// [1] Applies a margin bottom that is a multiple of the vertical grid in EMs.
// The first argument is the font size context and the second is multiple of the
// vertical grid unit.
// [2] Sets the type to one of the modular scale values and the second argument
// sets a unitless line-height as a multiple of the vertical grid.
// [3] A generic media query for tablet size ranges.
// [4] Applies a margin bottom that is the same vertical grid value as the mobile
// first rule.
// [5] Sets the type to one of the modular scale values and the second argument
// sets a unitless line-height as a multiple of the vertical grid.
h1,
.h1 {
  @include set-type(6, $ms-up2); // [2]

  @media (min-width: $bp-small) {
    @include set-type(8, $ms-up3); // [5]
    // [3]
    margin-bottom: em-rhythm(1, $ms-up3); // [4]
  }

  @media (min-width: $bp-medium) {
    @include set-type(10, $ms-up4);
    margin-bottom: em-rhythm(1, $ms-up4);
  }
  margin-bottom: em-rhythm(1, $ms-up2); // [1]
}

h2,
.h2 {
  @include set-type(5, $ms-up1);

  @media (min-width: $bp-small) {
    @include set-type(6, $ms-up2);
    margin-bottom: em-rhythm(1, $ms-up2);
  }

  @media (min-width: $bp-medium) {
    @include set-type(8, $ms-up3);
    margin-bottom: em-rhythm(1, $ms-up3);
  }
  margin-bottom: em-rhythm(1, $ms-up1);
}

h3,
.h3 {
  @include set-type(5, $ms-up1);

  @media (min-width: $bp-medium) {
    @include set-type(6, $ms-up2);
    margin-bottom: em-rhythm(1, $ms-up2);
  }
  margin-bottom: em-rhythm(1, $ms-up1);
}

h4,
.h4 {
  @include set-type(5, $ms-up1);
  margin-bottom: em-rhythm(1, $ms-up1);
}

h5,
.h5,
h6,
.h6 {
  @include set-type(4);
  margin-bottom: em-rhythm(1);
}

p {
  @media (min-width: $bp-small) {
    @if $paragraph-justify {
      text-align: justify;
    }
  }
  // max-width: em-rhythm(96);
  padding-top: 0;
  padding-bottom: 0;
  margin-top: 0;
  margin-bottom: em-rhythm($base-line-multi);
}

small,
.font-small {
  @include set-type(3, $ms-down1);
}

em {
  font-style: italic;
}

strong {
  font-weight: 600;
}

blockquote {
  padding-top: 0;
  padding-bottom: 0;
  padding-left: em-rhythm(4);
  border-left: $base-vertical-unit solid lighten(#000, 50%);
  margin-top: em-rhythm(4);
  margin-bottom: em-rhythm(4);
  margin-left: 0;
  font-family: $font-family-serif;

  p {
    margin-bottom: em-rhythm(2);
  }

  footer {
    cite {
      &::before {
        content: " â€“ ";
      }
    }
  }
}

pre,
code {
  font-family: $font-family-monospace;
}

time,
.time {
  text-transform: uppercase;
}

ol,
ul,
dl {
  padding-top: 0;
  padding-bottom: 0;
  margin-top: 0;
  margin-bottom: em-rhythm(4);
  // margin-left: em-rhythm(4);
}

ul ul,
ol ol,
dl dl {
  margin-left: 0;
}

ul {
  list-style: disc;
}

ol {
  list-style: decimal;
}

/// [1] @link https://developer.mozilla.org/en-US/docs/CSS/font-variant
abbr {
  font-weight: 600;
  font-variant: small-caps; // [1]
  text-transform: lowercase;
}

/// Cursor changed to a question mark when it has a title
abbr[title]:hover {
  cursor: help;
}

/// Creates horizontal rules that obey the baseline.
/// [1] Zero outs the user agent border
hr {
  @include rhythm-border-top(1px, 4);
  border: none; // [1]
  border-top-style: solid;
  border-top-color: $text-color;
  margin-top: em-rhythm(4);
  margin-bottom: 0;
}
