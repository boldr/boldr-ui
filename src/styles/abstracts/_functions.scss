// stylelint-disable length-zero-no-unit, max-line-length

///
/// @group functions
///

/// Strip units
/// Derived from Bourbon by thoughtbot (http://bourbon.io)
@function _mq-strip-units($val) {
  @return ($val / ($val * 0 + 1));
}

/// Pixels to Ems
/// Derived from Bourbon by thoughtbot (http://bourbon.io)
@function _mq-em($pxval, $base: $mq-em-base) {
  // alteration to prevent strings from causing an error
  @if (type-of($pxval) == "string") {
    @return $pxval;
  }

  @if not unitless($pxval) {
    $pxval: _mq-strip-units($pxval);
  }

  @if not unitless($base) {
    $base: _mq-strip-units($base);
  }

  @return ($pxval / $base) * 1em;
}

/// Turn string into a number
/// http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function number($string) {
  // Looping through all characters
  @for $i from 1 through str-length($string) {
    @if not $index {
      @warn "Unknown character `#{$character}`.";
      @return false;
    }
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);
    $number: nth($numbers, $index);
    $result: $result * 10 + $number;
  }

  @return $result;
  // Matrices
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers: 0 1 2 3 4 5 6 7 8 9;

  // Result
  $result: 0;
}

/// For getting the number values in ratio based ranges
@function get-start($string) {
  @return number( str-slice($string, 1, 1) );
  $string: unquote($string);
}

@function get-end($string) {
  @return number( str-slice($string, str-length($string), str-length($string)) );
  $string: unquote($string);
}

/// Check if value is an integer and returns true or false
@function is-int($number) {
  @return type-of($number) == number and floor(abs($number)) == abs($number);
}

/// Returns a number without a unit. For example 16px becomes 16
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

/// Returns an EM value. For example 24px becomes 1.5em
@function em-calc($target, $context: $base-font-size) {
  @return strip-units(($target / $context)) + 0em;
}

/// Returns an EM value that is a multiple of our defined base vertical unit. For
/// example 3 becomes 1.125em
@function em-rhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn #{$lines} + $not-integer-txt;
  }

  @return (strip-units($lines) * strip-units($base-vertical-unit)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

/// Returns a unitless number that is a multiple of our defined base vertical unit.
/// For example 3 becomes 1.125
@function unitless-rhythm($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn #{$lines} + $not-integer-txt;
  }

  @return ($lines * strip-units($base-vertical-unit)) / (strip-units($font-size) * strip-units($base-font-size));
}

@function powerNumber($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through - $exp {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function colorLuminance($color) {
  $color-rgb: ("red": red($color), "green": green($color), "blue": blue($color));

  @each $name, $value in $color-rgb {
    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + 0.055) / 1.055;
      $value: powerNumber($value, 2);
    }
    $adjusted: 0;
    $value: $value / 255;
    $color-rgb: map-merge($color-rgb,  ($name: $value));
  }

  @return map-get($color-rgb, "red") * 0.2126 + map-get($color-rgb, "green") * 0.7152 + map-get($color-rgb, "blue") * 0.0722;
}

@function findColorInvert($color) {
  @if colorLuminance($color) > 0.55 {
    @return rgba(#000, 0.7);
  } @else {
    @return #fff;
  }
}
